---
`---
title: "AML"
format: html
editor: visual
---

```{r}
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
if (!requireNamespace("doParallel", quietly = TRUE))
    install.packages("doParallel")
if (!requireNamespace("rafalib", quietly = TRUE))
    install.packages("rafalib")
if (!requireNamespace("DESeq2", quietly = TRUE))
  BiocManager::install("DESeq2")
if (!requireNamespace("GSVA", quietly = TRUE))
  BiocManager::install("GSVA", update = TRUE, ask = FALSE)
if (!requireNamespace("edgeR", quietly = TRUE))
  BiocManager::install("edgeR", update = TRUE, ask = FALSE)
if (!requireNamespace("FactoMineR", quietly = TRUE)) 
  install.packages("FactoMineR")
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("sva")
if (!requireNamespace("survminer", quietly = TRUE))
  BiocManager::install("survminer")
library(tidyverse)
library(readr)
library(biomaRt)
library(data.table)
library(doParallel)
library(future)
library(furrr)
library(survival)
library(DESeq2)
library(GSVA)
library(ggplot2)
library(dplyr)
library(edgeR)
library(purrr)
library(ggrepel)
library(FactoMineR)
library(sva)
library(rafalib)
library(limma)
library(caret)
library(survival)
library(survminer)
library(cowplot)
```

```{r}
metadata <- read_tsv("TARGET_AML_Clinical.tsv")
head(metadata)
```

## Counts data pre-processing

Since we have different tsv files for every sample, we need to load them all, pre-process them and merge them.

We will create a file with gene names as row names and samples as column names. Here, because multiple gene ids may map to the same gene name we must sum those up (transcripts from the same gene responsible or different isoforms).

```{r}
# Creates the data frame "merged_counts"
# Doesn't include gene_id 
# Sum the isoforms approach

# Step 0: Define the output file path for merged_counts
output_file <- "merged_counts.tsv"

# Step 1: List all TSV files in the counts directory (this part is now global)
counts_files <- list.files(path = "counts/", pattern = "\\.tsv$", full.names = TRUE)

# Step 2: Check if the file already exists
if (file.exists(output_file)) {
  # If the file exists, load it
  merged_counts <- read.delim(output_file, sep = "\t", header = TRUE, row.names = 1)
  print("Merged counts loaded from file.")
} else {
  # If the file does not exist, run the processing code to create it

  # Step 3: Set up parallel plan
  plan(multisession, workers = parallel::detectCores() - 1)

  # Step 4: Define the processing function for each file
  process_file <- function(file) {
    # Load the file into a dataframe
    df <- read.delim(file, sep = "\t", header = TRUE)

    # Convert to tibble to work smoothly with dplyr functions
    df <- as_tibble(df)

    # Perform preprocessing
    # Drop columns that we do not need
    columns_to_drop <- c("gene_id", "gene_type", "unstranded", "tpm_unstranded", "fpkm_unstranded", "fpkm_uq_unstranded")
    df <- dplyr::select(df, -all_of(columns_to_drop))

    # Drop columns that have all NA values
    df <- dplyr::select(df, where(~ any(!is.na(.))))

    # Sum values from "stranded_first" and "stranded_second"
    df <- df %>%
      mutate(summed_counts = stranded_first + stranded_second) %>%
      dplyr::select(-stranded_first, -stranded_second)  # Drop the original columns

    # Rename the resulting column to the file name
    new_column_name <- gsub(".*/|\\.tsv$", "", file) # Remove path and extension
    df <- dplyr::rename(df, !!new_column_name := summed_counts)

    # Group by gene_name and take the sum for duplicated gene names
    df <- df |>
      group_by(gene_name) |>
      summarise(across(everything(), sum, na.rm = TRUE), .groups = "drop")

    # Round all values to the nearest integer
    df <- df |>
      mutate(across(where(is.numeric), round))

    return(df)
  }

  # Step 5: Apply the function to each file in parallel using furrr::future_map
  counts_dataframe_list <- furrr::future_map(counts_files, process_file)

  # Step 6: Merge all dataframes in the list by "gene_name"
  merged_counts <- purrr::reduce(counts_dataframe_list, full_join, by = "gene_name")

  # Step 7: Make gene_names the row names
  merged_counts <- merged_counts |> column_to_rownames(var = "gene_name")

  # Step 8: Save the merged_counts to a TSV file
  write.table(merged_counts, file = output_file, sep = "\t", quote = FALSE, col.names = NA)
  print("Merged counts computed and saved to file.")
}

# Check the merged dataframe
print(merged_counts)
```

## Metadata pre-processing

We will work with the following variables:

-   Vital status (alive/dead)

-   Overall survival time in days

-   MRD at end of course 1&2 (for stratifying patients)

-   CR status at end of course 1&2 (for stratifying patients)

-   Protocol

```{r}
# Keep only the variables we will work with
metadata <- metadata[, c("TARGET USI", "Vital Status", "Overall Survival Time in Days", "MRD at end of course 1", "CR status at end of course 1", "Protocol")]

# Drop rows with NAs
metadata <- na.omit(metadata)

# Keep only rows for the patients we chose
# Extract sample names from the list of filenames
sample_names <- basename(counts_files)
sample_names <- gsub("\\.tsv$", "", sample_names)
# Filter metadata to keep only rows matching the extracted sample names
metadata <- metadata[metadata$`TARGET USI` %in% sample_names, ]

# Standardize the column names to make them easier to work with
names(metadata) <- gsub("[[:space:]]|\\.", "_", names(metadata))

# Rename columns for simplicity
names(metadata)[names(metadata) == "MRD_at_end_of_course_1"] <- "MRD_status"
names(metadata)[names(metadata) == "CR_status_at_end_of_course_1"] <- "CR_status"
names(metadata)[names(metadata) == "Overall_Survival_Time_in_Days"] <- "Survival_Time"

# Convert the values of the CR_status column (it is needed later for DESeq)
metadata$CR_status <- ifelse(metadata$CR_status == "CR", "Yes", "No")
```

The variable "Protocol" was used to identify if we had patients treated with different protocols. Out initial data set contained patients treated with two different protocols (19+1). After performing PCA on that data, we identified that PC1 was catching the variance of the different protocol (stratified the patients on the plot based on the protocol), and the sole patient to be treated with a different protocol was excluded. In their place, another one with the same protocol as the rest was added.

We did that since this specific patient would add variance related only to technical issues and it would be very difficult (if even possible) to account properly for that in our downstream analysis.

## PCA on the raw count data

```{r}
# Prepare the data
# Remove non-numeric columns (gene_id and gene_name)
# Step 1: Extract expression data and transpose
expression_data <- t(as.matrix(merged_counts))

# Step 2: Assign sample IDs as row names
rownames(expression_data) <- colnames(merged_counts)
rownames(expression_data) <- gsub("\\.", "-", rownames(expression_data))

# Step 3: Replace infinite values with NA
expression_data[is.infinite(expression_data)] <- NA

# Step 4: Replace NA with column mean
for (i in seq_len(ncol(expression_data))) {
  expression_data[is.na(expression_data[, i]), i] <- mean(expression_data[, i], na.rm = TRUE)
}

# Step 5: Filter features based on variance
variances <- apply(expression_data, 2, var, na.rm = TRUE)
threshold <- 0.0001  # Adjustable, just needs to be different than zero
high_variance_features <- variances > threshold
expression_data <- expression_data[, high_variance_features]

# Output remaining features
cat("Remaining features after variance filter:", ncol(expression_data), "\n")

# Step 6: Standardize the data
standardized_data <- scale(expression_data)

# Final checks
cat("Dimension of standardized data:", dim(standardized_data), "\n")
```

```{r}
# Check alignment
all(rownames(expression_data) %in% metadata$TARGET_USI)  # Should return TRUE
```

```{r}
# Perform PCA using prcomp()
# standardized_data should have rows as samples and columns as features
pca_result <- prcomp(standardized_data, scale. = TRUE)

# Extract variance explained by the first two components
explained_variance <- (pca_result$sdev^2) / sum(pca_result$sdev^2) * 100
PC1_variance <- round(explained_variance[1], 1)
PC2_variance <- round(explained_variance[2], 1)

# Create a data frame for PCA results
pca_data <- data.frame(
  Sample = rownames(standardized_data),
  PC1 = pca_result$x[, 1],
  PC2 = pca_result$x[, 2]
)

# Merge PCA results with metadata
pca_data <- left_join(pca_data, metadata, by = c("Sample" = "TARGET_USI"))

# Create this for better sample name visualization
pca_data$Sample_for_plot <- gsub("^TARGET-20-", "", pca_data$Sample)

# Plot PCA stratified by CR_status
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = CR_status, label = Sample_for_plot)) +
  geom_point(size = 4) +
  geom_text_repel(vjust = -0.5, hjust = 0.5, size = 3, show.legend = FALSE) +
  ggtitle("PCA plot based on raw counts") +
  labs(
    subtitle = "Differentiating responders from non-responders"
  ) +
  xlab(paste0("PC 1 (", PC1_variance, "% variance explained)")) +
  ylab(paste0("PC 2 (", PC2_variance, "% variance explained)")) +
  scale_color_discrete(name = "CR status") +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "white", color = NA),  # Set panel background to white
    plot.background = element_rect(fill = "white", color = NA)    # Set overall plot background to white
  )

pca_plot

# Save the plot
ggsave("PCA_raw_counts.png", plot = pca_plot, width = 6, height = 5, dpi = 300)

```

It would be visual and meaning-wise better to perform PCA also based on the TPM counts (normalize for gene length and mainly for sequencing depth). We don't have the TPM values so we must calculate them.

## TPM calculation

First, we need the **GENE LENGTH** for that, which we don't have. We can try to get this info from Ensembl.

```{r}
# Step 1: Connect to Ensembl
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")

# Step 2: Get all the gene names from merged_counts
gene_symbols <- rownames(merged_counts)

# Step 3: Retrieve gene lengths from Ensembl using biomaRt
# We want to retrieve 'hgnc_symbol', 'transcript_length' and 'transcript_is_canonical"
gene_lengths_df <- getBM(
  attributes = c("hgnc_symbol", "transcript_length", "transcript_is_canonical"),
  filters = "hgnc_symbol",
  values = gene_symbols,
  mart = ensembl
)

# Since there are multiple gene lengths assigned to each gene, we chose each gene's canonical length
gene_lengths_df <- gene_lengths_df |> 
dplyr::filter(!is.na(transcript_is_canonical))

# Convert to a named vector
gene_lengths <- setNames(gene_lengths_df$transcript_length,gene_lengths_df$hgnc_symbol)

# Check the resulting gene lengths
print(gene_lengths)
```

Now we can **normalize the raw counts to TPM**. We can easily do that manually in four steps:

1.  Calculate RPK (Reads Per Kilobase): RPK = counts / gene length in kilobases. This steps normalizes the counts for the gene length

2.  Calculate scaling factors: Sum all RPK values per sample

3.  Calculate corrector factor: Divide the scaling factor by 1 million (the result value is called corrector count)

4.  Calculate TPM: Normalize each RPK using the corrector factor. This normalizes for sequencing depth.

5.  We will log-normalize the TPM values with log2(tpm+1) to reduce skewness in the data, while also handling the zero values. This will stabilize variance and improve comparability.

```{r}
# Step 1: Identify common gene names between counts data and gene lengths
common_genes <- intersect(rownames(merged_counts), names(gene_lengths))

# Step 2: Subset merged_counts to keep rows with genes that are in common_genes
counts_subset <- merged_counts[common_genes, ]

# Step 3: Subset gene_lengths to keep only genes that are in common_genes
gene_lengths_subset <- gene_lengths[common_genes]

# Step 4: Convert counts data frame to a matrix, as required by 'tpm'
counts_subset_matrix <- as.matrix(counts_subset)

# Step 5: Ensure gene_lengths are in numeric vector format
gene_lengths_vector <- as.numeric(gene_lengths_subset)

# Step 6: Calculate RPK
# Normalize counts by gene length (in kilobases)
rpk <- counts_subset_matrix / (gene_lengths_vector / 1000)

# Step 7: Calculate per-sample scaling factor
total_rpk_per_sample <- colSums(rpk)

# Step 8: Calculate the corrector counts by dividing total RPK by 1 million
corrector_counts <- total_rpk_per_sample / 1e6

# Step 9: Calculate TPM by dividing RPK by corrector counts for each sample
tpm_matrix <- t(t(rpk) / corrector_counts)

# Step 10: Convert TPM matrix back to a data frame
tpm_counts <- as.data.frame(tpm_matrix)

# Step 11: Log Normalize the tpm counts file.
log_normalized_tpm <- log2(tpm_counts + 1)

# Save the TPM values to a file
write.table(tpm_counts, file = "tpm_counts.tsv", sep = "\t", quote = FALSE, row.names = TRUE, col.names = TRUE)

# Save the log-normalized TPM values to a file
write.table(log_normalized_tpm, file = "log_normalized_tpm.tsv", sep = "\t", quote = FALSE, row.names = TRUE, col.names = TRUE)
```

Now we can perform PCA on the TPM data

```{r}
# Step 1: Transpose TPM data for PCA (samples as rows, features as columns)
expression_data <- t(log_normalized_tpm)

# Step 2: Assign sample IDs as row names
rownames(expression_data) <- colnames(merged_counts)
rownames(expression_data) <- gsub("\\.", "-", rownames(expression_data))

# Step 3: Replace infinite values with NA
expression_data[is.infinite(expression_data)] <- NA

# Step 4: Replace NA with column mean
for (i in seq_len(ncol(expression_data))) {
  expression_data[is.na(expression_data[, i]), i] <- mean(expression_data[, i], na.rm = TRUE)
}

# Step 5: Filter features based on variance
variances <- apply(expression_data, 2, var, na.rm = TRUE)
threshold <- 0.0001  # Adjustable
high_variance_features <- variances > threshold
expression_data <- expression_data[, high_variance_features]

cat("Remaining features after variance filter:", ncol(expression_data), "\n")

# Step 6: Standardize the data
standardized_data <- scale(expression_data)

cat("Dimension of standardized data:", dim(standardized_data), "\n")

# Perform PCA
pca_result_tpm <- prcomp(standardized_data, scale. = TRUE)

# Extract variance explained by the first two components
explained_variance_tpm <- (pca_result_tpm$sdev^2) / sum(pca_result_tpm$sdev^2) * 100
PC1_variance_tpm <- round(explained_variance_tpm[1], 1)
PC2_variance_tpm <- round(explained_variance_tpm[2], 1)

# Create a data frame for PCA results
pca_data_tpm <- data.frame(
  Sample = rownames(standardized_data),
  PC1_tpm = pca_result_tpm$x[, 1],
  PC2_tpm = pca_result_tpm$x[, 2]
)

# Merge PCA results with metadata
pca_data_tpm <- left_join(pca_data_tpm, metadata, by = c("Sample" = "TARGET_USI"))

# Create this for better sample name visualization
pca_data_tpm$Sample_for_plot <- gsub("^TARGET-20-", "", pca_data_tpm$Sample)

# Visualize PCA
pca_plot_tpm <- ggplot(pca_data_tpm, aes(x = PC1_tpm, y = PC2_tpm, color = CR_status, label = Sample_for_plot)) +
  geom_point(size = 4) +
  geom_text_repel(vjust = -0.5, hjust = 0.5, size = 3, show.legend = FALSE) +
  ggtitle("PCA plot based on TPM values") +
  labs(
    subtitle = "Differentiating responders from non-responders"
  ) +
  xlab(paste0("PC 1 (", PC1_variance_tpm, "% variance explained)")) +
  ylab(paste0("PC 2 (", PC2_variance_tpm, "% variance explained)")) +
  scale_color_discrete(name = "CR Status") +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "white", color = NA),  # Set panel background to white
    plot.background = element_rect(fill = "white", color = NA)    # Set overall plot background to white
  )

pca_plot_tpm

# Save the plot
ggsave("PCA_TPM.png", plot = pca_plot_tpm, width = 6, height = 5, dpi = 300)
```

The first two PCs now explain a slight bigger percentage of the variance, although not a big improvement. Also, the placement of the samples on the plot did change, but the samples are less spread now than before.

```{r}
# Create a data frame for variance explained by each principal component
explained_variance_df <- data.frame(
  Principal_Component = seq_along(explained_variance),
  Variance_Explained = explained_variance
)

# Plot the explained variance
ggplot(explained_variance_df, aes(x = Principal_Component, y = Variance_Explained)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  ggtitle("Explained Variance by PC") +
  xlab("Principal Component") +
  ylab("Variance Explained (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Survival analysis

```{r}
# We want to stratify patients based on "MRD" or "CR", so we first need to convert them to 'factor'
metadata$MRD_status <- factor(metadata$MRD_status, levels = c("No", "Yes"))
metadata$CR_status <- factor(metadata$CR_status, levels = c("No", "Yes"))

# We also need to convert "Vital status" to a boolean (0 for alive, 1 for dead)
#metadata$Vital_Status <- ifelse(metadata$Vital_Status == "Dead", 1, 0)

# Create the survival object
sd <- survdiff(Surv(Survival_Time, Vital_Status) ~ CR_status, data = metadata)
sd

# Save the p-value
p_value <- 1 - pchisq(sd$chisq, length(sd$n) - 1)

# Create the Kaplan-Meier object and plot it
km <- survfit(Surv(Survival_Time, Vital_Status) ~ CR_status, data = metadata)
plot(km, xlim = c(0, 1200), xlab = "Time in Days", ylab = "Survival Probability",main = "Kaplan-Meier Plot")
text(x = 800, y = 0.2, labels = paste("p-value =", round(p_value, 4)), col = "red", cex = 1.2)

# Enhanced Kaplan-Meier plot
survival_cr <- ggsurvplot(
  km, 
  data = metadata,
  pval = TRUE,  # Display p-value on the plot
  pval.coord = c(150, 0.4),  # Set the position of the p-value annotation
  pval.size = 10,  # Set the size of the p-value text
  conf.int = FALSE,  # Remove confidence intervals for the survival curves
  censor = FALSE,  # Remove censoring marks
  risk.table = TRUE,  # Add number at risk table below the plot
  risk.table.col = "strata",  # Color risk table by strata
  break.time.by = 250,  # Set x-axis breaks to be every 250 days
  size = 3,  # Increase the line thickness of the survival curves
  ggtheme = theme_minimal() +  # Set a clean minimal theme
    theme(
      panel.background = element_rect(fill = "white", color = NA),  # Ensure panel background is white
      plot.background = element_rect(fill = "white", color = NA),   # Ensure overall plot background is white
      legend.background = element_rect(fill = "white", color = NA), # Set legend background to white
      legend.key = element_rect(fill = "white", color = NA),        # Set legend key (box around legend items) to white
      plot.margin = margin(t = 10, r = 20, b = 10, l = 10, unit = "mm")  # Add more margin space, especially on the right
    ),
  palette = c("#E64B35", "#4DBBD5"),  # Set custom colors for each group
  title = "Kaplan-Meier estimator plot",
   subtitle = "Differentiating responders from non-responders based on CR status",
  xlab = "Time (Days)",
  ylab = "Survival Probability",
  legend.title = "CR Status",
  legend.labs = c("No", "Yes"),  # Customize labels in the legend
  xlim = c(0, 1200),  # Limit x-axis range
  ylim = c(0.25, 1),
  font.title = c(16, "bold"),  # Customize title font
  font.subtitle = c(13, "bold"), 
  font.x = c(14),  # Customize x-axis label font
  font.y = c(14),  # Customize y-axis label font
  font.tickslab = c(12),  # Customize tick label font
  font.legend = c(12)  # Customize legend font
)

# Combine the main plot and risk table
combined_plot <- plot_grid(
  survival_cr$plot,        # Main survival plot
  survival_cr$table + theme(plot.background = element_rect(fill = "white")),  # Risk table with white background
  ncol = 1,                # Stack vertically
  rel_heights = c(3, 1)    # Ratio of space given to the plot and the risk table
)

combined_plot

# Save the combined plot with ggsave
ggsave("Kaplan_Meier_CR.png", plot = combined_plot, width = 10, height = 10, dpi = 300, bg = "white")
```

We don't find a **p-value** \< 0.05, which means the difference is not significant (p-value = 0.8913 for MRD and 0.0402 for CR).

## DESeq

We will perform differential gene expression analysis in order to find genes differentially expressed between responders and non-responders (CR status).

```{r}
# Step 1: Assign sample names as rownames to metadata
# Ensure merged_counts is a tibble (if not, convert it)
colnames(merged_counts) <- gsub("\\.", "-", colnames(merged_counts))

# Print column names of merged_counts and metadata$TARGET_USI
if (!all(metadata$TARGET_USI %in% colnames(merged_counts))) {
  mismatched_samples <- setdiff(metadata$TARGET_USI, colnames(merged_counts))
  stop("The following sample names are in metadata but not in merged_counts: ", 
       paste(mismatched_samples, collapse = ", "))
}

# Reorder merged_counts columns to match metadata$TARGET_USI
merged_counts <- merged_counts[, metadata$TARGET_USI, drop = FALSE]

# Now the colnames of merged_counts match the rownames of metadata in order

# Create the DESeq object and run DESeq
# DESeq is performed ALWAYS with raw counts
dds <- DESeqDataSetFromMatrix(countData = merged_counts, colData = metadata, design = ~ CR_status)

# Pre-filtering: remove rows with low gene counts (keep rows that have at least 10 reads total) - recommended but not mandatory step
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]

# Run DESeq
dds <- DESeq(dds)

# Store the results and display a table of the number of significantly differentially expresssed genes
res <- as.data.frame(results(dds))
cat("Significantly differentially expressed genes between responders and non-responders.\n\nThis number doesn't add up to the total number of genes in merged_counts because there are NA values in p-adj for some genes.\n")
print(table(res$padj < 0.05))

# Filter the significant genes and extract their names
significant_genes <- res[!is.na(res$padj) & res$padj < 0.05, ]
significant_gene_names <- rownames(significant_genes)
```

## Volcano plot

We found some genes that are significantly differentiated between responders and non-responders. We can visualize the most significant ones with a volcano plot.

```{r}
# Add a significance column for plotting
res$significance <- "Not Significant"
res$significance[res$padj < 0.05 & res$log2FoldChange > 0] <- "Upregulated"
res$significance[res$padj < 0.05 & res$log2FoldChange < 0] <- "Downregulated"

# Volcano plot
volcano_plot <- ggplot(res, aes(x = log2FoldChange, y = -log10(padj), color = significance)) +
  geom_point(alpha = 0.8, size = 1.5) +  # Points for genes
  scale_color_manual(values = c("Not Significant" = "grey", 
                                "Upregulated" = "red", 
                                "Downregulated" = "blue")) +
  theme_minimal() +
  labs(title = "Differentially expressed genes between responders and non-responders",
       subtitle = "Names of the most significant ones displayed",
       x = "Log2 Fold Change",
       y = "-Log10 Adjusted P-value",
       color = "Significance") +
  theme(legend.position = "top",
        plot.title = element_text(size = 10, face = "bold"),
    plot.subtitle = element_text(size = 8, face = "bold"))

# Step 1: Subset for upregulated and downregulated genes
upregulated_genes <- res[res$significance == "Upregulated", ] 
downregulated_genes <- res[res$significance == "Downregulated", ] 

# Step 2: Sort by significance (adjusted p-value) and select the top 10 from each
top_upregulated_genes <- upregulated_genes[order(upregulated_genes$padj), ][1:10, ]
top_downregulated_genes <- downregulated_genes[order(downregulated_genes$padj), ][1:10, ]

# Step 3: Combine the selected genes for labeling
top_genes <- rbind(top_upregulated_genes, top_downregulated_genes)

# Add labels to the plot for the selected top genes
volcano_plot <- volcano_plot +
  geom_text_repel(data = top_genes, aes(label = rownames(top_genes)), size = 3, vjust = -0.5, max.overlaps = Inf)

# Print the volcano plot
print(volcano_plot)

# Save the plot
ggsave("Volcano_plot.png", plot = volcano_plot, width = 6, height = 5, dpi = 300, bg = "white")
```

We found a satisfactory amount of differentially expressed genes. We will try to stratify patients on those and perform survival analysis. We will find the median expression and see if the expression for each sample is higher or lower. Because in this way we **COMPARE** samples, we need to use the TPM values and not raw counts, since they need to be comparable.

```{r}
# Since the significant genes were found based on the raw counts, we need first to check if they are present in the tpm dataframe - we lose some genes here
common_significant_genes <- intersect(significant_gene_names, rownames(log_normalized_tpm))

# We will now implement a trick to check all individual significant genes. We will loop through all genes and store the results in a matrix.

# Create an empty matrix to store the p-values and significance for each gene
results_matrix <- matrix(nrow = length(common_significant_genes), ncol = 2)
rownames(results_matrix) <- common_significant_genes
colnames(results_matrix) <- c("p_value", "is_significant")

# Loop through each gene in common_significant_genes
for (gene in common_significant_genes) {
  # Extract the gene expression values from log_normalized_tpm
  gene_values <- as.matrix(log_normalized_tpm)[rownames(log_normalized_tpm) == gene, ]
  
  # Calculate biomarker status based on median split for the current gene
  metadata$biomarker_status <- gene_values > median(gene_values, na.rm = TRUE)

  # Perform survival analysis using the Kaplan-Meier and log-rank test
  sd <- survdiff(Surv(Survival_Time, Vital_Status) ~ biomarker_status, data = metadata)
  
  # Extract p-value from the survdiff result
  p_value <- 1 - pchisq(sd$chisq, length(sd$n) - 1)

  # Store p-value and significance in the results matrix
  results_matrix[gene, "p_value"] <- p_value
  results_matrix[gene, "is_significant"] <- p_value < 0.025
}

# Convert results_matrix to a data frame for easier viewing
results_df <- as.data.frame(results_matrix)
results_df$p_value <- as.numeric(results_df$p_value)
results_df$is_significant <- as.logical(results_df$is_significant)


# Apply Benjamini-Hochberg correction for multiple testing to the p-values
results_df$adjusted_p_value <- p.adjust(results_df$p_value, method = "BH")

# Add a new column to indicate significance after multiple testing correction
results_df$is_significant_corrected <- results_df$adjusted_p_value < 0.05

# Print the results data frame
print(results_df)

# After that you can create a Kaplan-Meier plot for each gene (not displayed here)
```

## ssGSEA

We found some genes that can point out a statistical difference in the survival of the two groups (higher or lower expression of a gene). But genes rarely work individually in nature, so let's take a multivariate approach, that is, define a group of genes. We will start by selecting the e.g. 15 most significantly up regulated genes in responders, calculate the sample wise gene set enrichment and split again the patients into two groups.

```{r}
# Get only the 15 most significantly up regulated genes
res2 <- res[res$padj < 0.05 & res$log2FoldChange > 0,]
gene_set <- list(responder_set = rownames(res2[order(res2$padj),])[1:15])

# Perform the sample wise gene set enrichment
param <- ssgseaParam(as.matrix(log_normalized_tpm), gene_set)
enrich <- gsva(param)

# Perform the log-rank and produce the plot
metadata$biomarker_status <- enrich[1,] > median(enrich[1,])
sd <- survdiff(Surv(Survival_Time, Vital_Status) ~ biomarker_status, data = metadata) 
sd 

# Save the p-value
p_value <- 1 - pchisq(sd$chisq, length(sd$n) - 1)

km <- survfit(Surv(Survival_Time, Vital_Status) ~ biomarker_status, data = metadata) 
plot(km, xlim = c(0, 1200), xlab = "Time in Days", ylab = "Survival Probability",main = "Kaplan-Meier Plot")
text(x = 800, y = 0.2, labels = paste("p-value =", round(p_value, 4)), col = "red", cex = 1.2)
```

```{r}
# ALTERNATIVE APPROACH
# Get a subset of the results of the DESeq genes that can stratify efficiently the patients
significant_genes_df <- results_df %>% filter(is_significant == TRUE)

# And now follow the same approach as the code block before
# Ensure the significant_genes_df has rownames, which are the gene names
significant_gene_names <- rownames(significant_genes_df)

# Extract the significant genes from 'res' (the original DESeq2 results)
significant_genes_with_logfc <- res[significant_gene_names, ]

# Keep only upregulated genes (log2FoldChange > 0) and order by adjusted p-value
res3 <- significant_genes_with_logfc %>%
  #filter(log2FoldChange > 0) %>%   # Filter for upregulated genes
  arrange(padj)                    # Sort by adjusted p-value

# Sort res3 by padj in ascending order
res3_sorted <- res3[order(res3$padj), ]

# Get the rownames of the top 15 genes based on the sorted padj values
top_15_genes <- rownames(res3_sorted)

# Create a gene set list with the top 15 genes
gene_set <- list(responder_set = top_15_genes)

# Perform the sample wise gene set enrichment
param <- ssgseaParam(as.matrix(log_normalized_tpm), gene_set)
enrich <- gsva(param)

# Perform the log rank and produce the plot
#metadata$biomarker_status <- enrich[1,] > median(enrich[1,])

# Define bottom and top quartile thresholds
bottom_quartile_threshold <- quantile(enrich[1, ], 0.25, na.rm = TRUE)  # 25th percentile (bottom quartile)
top_quartile_threshold <- quantile(enrich[1, ], 0.75, na.rm = TRUE)    # 75th percentile (top quartile)

# Create a vector for biomarker_status, initially set to NA for all
metadata$biomarker_status <- rep(NA, length(enrich[1, ]))

# Assign "low" to samples in the bottom 25%
metadata$biomarker_status[enrich[1, ] <= bottom_quartile_threshold] <- "low"

# Assign "high" to samples in the top 25%
metadata$biomarker_status[enrich[1, ] >= top_quartile_threshold] <- "high"

# Filter out the middle 50% (samples with NA biomarker_status)
metadata_filtered <- metadata[!is.na(metadata$biomarker_status), ]

sd <- survdiff(Surv(Survival_Time, Vital_Status) ~ biomarker_status, data = metadata) 
sd 

# Save the p-value
p_value <- 1 - pchisq(sd$chisq, length(sd$n) - 1)

km <- survfit(Surv(Survival_Time, Vital_Status) ~ biomarker_status, data = metadata) 
plot(km, xlim = c(0, 1200), xlab = "Time in Days", ylab = "Survival Probability",main = "Kaplan-Meier Plot")
text(x = 800, y = 0.2, labels = paste("p-value =", round(p_value, 4)), col = "red", cex = 1.2)
```

```{r}
# Extract rows from res where rownames match the biomarker_list
res_subset <- subset(res, rownames(res) %in% top_15_genes)
```

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

# Till here is good

Identify new biomarkers

```{r}
biomarker_list <- c("GALNT17"   ,"SOX11",     "SKIDA1",    "PARD3B",    "KLF8",      "KCNMB4", "LINC01829", "DUOX2" )
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("clusterProfiler")

enrich <- enrichGO(gene = biomarker_list, OrgDb = org.Hs.eg.db, ont = "BP", keyType = "SYMBOL")
dotplot(enrich, showCategory = 20, title = "GO Biological Processes")

```

```{r}
# Install required packages if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE)) {
  install.packages("BiocManager")
}

if (!requireNamespace("clusterProfiler", quietly = TRUE)) {
  BiocManager::install("clusterProfiler")
}

if (!requireNamespace("org.Hs.eg.db", quietly = TRUE)) {
  BiocManager::install("org.Hs.eg.db")
}

# Load required libraries
library(clusterProfiler)
library(org.Hs.eg.db)

# Define the biomarker list
biomarker_list <- c(
 "MEG3","MEX3B", "MTND1P23", "GPRASP2",  "TOE1" , "PLEKHG4",  "BOK" , "TCTE1"   , "ADAMTS14")


# Map SYMBOL to ENTREZID
converted_genes <- bitr(
  biomarker_list,
  fromType = "SYMBOL",
  toType = "ENTREZID",
  OrgDb = org.Hs.eg.db
)

# Check if any valid mappings were found
if (nrow(converted_genes) > 0) {
  # Perform GO enrichment analysis
  enrich <- enrichGO(
    gene = converted_genes$ENTREZID,  # Use ENTREZ IDs
    OrgDb = org.Hs.eg.db,
    ont = "C",                       # Biological Processes
    keyType = "ENTREZID",
    pvalueCutoff = 0.1,               # Relax the threshold
    qvalueCutoff = 0.1
  )
  
  # Convert enrichment results to a data frame
  result_df <- as.data.frame(enrich)
  
  # Check if results exist
  if (nrow(result_df) > 0) {
    # Print the first few rows of results
    print(head(result_df))
    
    # Visualize the results
    dotplot(enrich, showCategory = 20, title = "GO Biological Processes")
  } else {
    print("No enriched GO terms found.")
  }
} else {
  print("No valid gene mappings found in biomarker_list.")
}

#We couldn t identify a significant Pathway
```
