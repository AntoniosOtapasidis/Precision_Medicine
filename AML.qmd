---
title: "AML"
format: html
editor: visual
---

```{r}
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
if (!requireNamespace("doParallel", quietly = TRUE))
    install.packages("doParallel")
library(tidyverse)
library(readr)
library(biomaRt)
library(data.table)
library(doParallel)
library(future)
library(furrr)
```

```{r}
metadata <- read_tsv("TARGET_AML_Clinical.tsv")
```

## Counts data pre-processing

Since we have different tsv files for every sample, we need to load them all, pre-process them and merge them.

We can create two files:

1.  One with gene names as row names and samples as column names. Here, because multiple gene ids may map to the same gene name we must either sum those (approach A), keep the most expressed isoform (approach B) or another handling.

2.  The same but with gene ids as row names, samples as column names plus another column with the gene names. Could be useful if we try CAR-T cell target evaluation for isoforms (maybe this is too much).

```{r}
# Creates the data frame "merged_counts"
# Doesn't include gene_id 
# Sum the isoforms approach

# Step 0: Define the output file path for merged_counts
output_file <- "merged_counts.tsv"

# Step 1: List all TSV files in the counts directory (this part is now global)
counts_files <- list.files(path = "counts/", pattern = "\\.tsv$", full.names = TRUE)

# Step 2: Check if the file already exists
if (file.exists(output_file)) {
  # If the file exists, load it
  merged_counts <- read.delim(output_file, sep = "\t", header = TRUE, row.names = 1)
  print("Merged counts loaded from file.")
} else {
  # If the file does not exist, run the processing code to create it

  # Step 3: Set up parallel plan
  plan(multisession, workers = parallel::detectCores() - 1)

  # Step 4: Define the processing function for each file
  process_file <- function(file) {
    # Load the file into a dataframe
    df <- read.delim(file, sep = "\t", header = TRUE)

    # Convert to tibble to work smoothly with dplyr functions
    df <- as_tibble(df)

    # Perform preprocessing
    # Drop columns that we do not need
    columns_to_drop <- c("gene_id", "gene_type", "unstranded", "tpm_unstranded", "fpkm_unstranded", "fpkm_uq_unstranded")
    df <- dplyr::select(df, -all_of(columns_to_drop))

    # Drop columns that have all NA values
    df <- dplyr::select(df, where(~ any(!is.na(.))))

    # Sum values from "stranded_first" and "stranded_second"
    df <- df %>%
      mutate(summed_counts = stranded_first + stranded_second) %>%
      dplyr::select(-stranded_first, -stranded_second)  # Drop the original columns

    # Rename the resulting column to the file name
    new_column_name <- gsub(".*/|\\.tsv$", "", file) # Remove path and extension
    df <- dplyr::rename(df, !!new_column_name := summed_counts)

    # Group by gene_name and take the sum for duplicated gene names
    df <- df |>
      group_by(gene_name) |>
      summarise(across(everything(), sum, na.rm = TRUE), .groups = "drop")

    # Round all values to the nearest integer
    df <- df |>
      mutate(across(where(is.numeric), round))

    return(df)
  }

  # Step 5: Apply the function to each file in parallel using furrr::future_map
  counts_dataframe_list <- furrr::future_map(counts_files, process_file)

  # Step 6: Merge all dataframes in the list by "gene_name"
  merged_counts <- reduce(counts_dataframe_list, full_join, by = "gene_name")

  # Step 7: Make gene_names the row names
  merged_counts <- merged_counts |> column_to_rownames(var = "gene_name")

  # Step 8: Save the merged_counts to a TSV file
  write.table(merged_counts, file = output_file, sep = "\t", quote = FALSE, col.names = NA)
  print("Merged counts computed and saved to file.")
}

# Check the merged dataframe
print(merged_counts)
```

```{r}
# TO BE USED IF WE ANALYZE ISOFORMS
# Creates the data frame "merged_counts_with_ids"
# Includes gene_id

# Step 1: Initialize an empty list to store dataframes
counts_dataframe_list_with_ids <- list()

# Step 2: Loop through each file, read it, process, and store in the list
for (file in counts_files) {
  # Load the file into a dataframe
  df <- read.delim(file, sep = "\t", header = TRUE)

  # Perform preprocessing
  # Drop columns that we do not need (assuming we keep stranded_first, stranded_second, and gene_id)
  columns_to_drop <- c("gene_type", "unstranded", "tpm_unstranded", "fpkm_unstranded", "fpkm_uq_unstranded")
  df <- df[, !(names(df) %in% columns_to_drop)]

  # Drop columns that have all NA values
  df <- df[, colSums(!is.na(df)) > 0]

  # Add `stranded_first` and `stranded_second` and create a new combined column
  df$combined_stranded <- rowSums(df[, c("stranded_first", "stranded_second")], na.rm = TRUE)

  # Drop `stranded_first` and `stranded_second`
  df <- df[, !(names(df) %in% c("stranded_first", "stranded_second"))]

  # Rename the combined column to the file name
  new_column_name <- gsub(".*/|\\.tsv$", "", file)
  colnames(df)[colnames(df) == "combined_stranded"] <- new_column_name

  # Store the dataframe in the list
  counts_dataframe_list_with_ids[[file]] <- df
}

# Step 3: Merge all dataframes in the list by both "gene_name" and "gene_id"
merged_counts_with_ids <- reduce(counts_dataframe_list_with_ids, full_join, by = c("gene_name", "gene_id"))

# Check the merged dataframe
print(merged_counts_with_ids)
```

## Metadata pre-processing

We care about the following variables:

-   Vital status (alive/dead)

-   Overall survival time in days

-   MRD at end of course 1 (for stratifying patients)

-   CR status at end of course 1 (for stratifying patients)

```{r}
# Keep only the variables we will work with
metadata <- metadata[, c("TARGET USI", "Vital Status", "Overall Survival Time in Days", "MRD at end of course 1", "CR status at end of course 1")]

# Drop rows with NAs
metadata <- na.omit(metadata)

# Keep only rows for the patients we chose
# Extract sample names from the list of filenames
sample_names <- basename(counts_files)
sample_names <- gsub("\\.tsv$", "", sample_names)
# Filter metadata to keep only rows matching the extracted sample names
metadata <- metadata[metadata$`TARGET USI` %in% sample_names, ]
```
